import React, { useState } from 'react';
import { doc, updateDoc, deleteDoc } from 'firebase/firestore';
import { db } from '../firebase';

const OrderCard = ({ order, onUpdate, onDelete }) => {
  const [isEditing, setIsEditing] = useState(false);
  const [editedOrder, setEditedOrder] = useState(order);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setEditedOrder((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSave = async () => {
    try {
      const orderRef = doc(db, 'orders', order.id);
      await updateDoc(orderRef, editedOrder);
      onUpdate(editedOrder); // –ü–µ—Ä–µ–¥–∞—ë–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ
      setIsEditing(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
    }
  };

  const handleDelete = async () => {
    if (window.confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É?')) {
      try {
        await deleteDoc(doc(db, 'orders', order.id));
        onDelete(order.id);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error);
      }
    }
  };

  return (
    <div className="card mb-3 shadow-sm">
      <div className="card-body">
        {isEditing ? (
          <>
            <input
              className="form-control mb-2"
              name="clientName"
              value={editedOrder.clientName}
              onChange={handleChange}
            />
            <input
              className="form-control mb-2"
              name="phone"
              value={editedOrder.phone}
              onChange={handleChange}
            />
            <select
              className="form-control mb-2"
              name="status"
              value={editedOrder.status}
              onChange={handleChange}
            >
              <option>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</option>
              <option>–í —Ä–∞–±–æ—Ç–µ</option>
              <option>–ó–∞–≤–µ—Ä—à–µ–Ω–æ</option>
            </select>
            <button onClick={handleSave} className="btn btn-success btn-sm me-2">
              üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
            <button onClick={() => setIsEditing(false)} className="btn btn-secondary btn-sm">
              ‚ùå –û—Ç–º–µ–Ω–∞
            </button>
          </>
        ) : (
          <>
            <h5 className="card-title">{order.clientName}</h5>
            <p className="card-text">
              <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {order.phone}<br />
              <strong>–¢–µ—Ö–Ω–∏–∫:</strong> {order.technician}<br />
              <strong>–°—Ç–∞—Ç—É—Å:</strong> {order.status}
            </p>
            <button onClick={() => setIsEditing(true)} className="btn btn-primary btn-sm me-2">
              ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            </button>
            <button onClick={handleDelete} className="btn btn-danger btn-sm">
              üóë –£–¥–∞–ª–∏—Ç—å
            </button>
          </>
        )}
      </div>
    </div>
  );
};

export default OrderCard;
