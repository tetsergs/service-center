import React, { useState } from 'react';
import { doc, updateDoc, deleteDoc } from 'firebase/firestore';
import { db } from '../firebase';
import jsPDF from 'jspdf';

const OrderCard = ({ order, onUpdate, onDelete }) => {
  const [isEditing, setIsEditing] = useState(false);
  const [editedOrder, setEditedOrder] = useState({ ...order });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setEditedOrder((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSave = async () => {
    try {
      const orderRef = doc(db, 'orders', order.id);
      await updateDoc(orderRef, editedOrder);
      onUpdate(editedOrder); // –ø–µ—Ä–µ–¥–∞—ë–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
      setIsEditing(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
    }
  };

  const handleDelete = async () => {
    if (window.confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É?')) {
      try {
        await deleteDoc(doc(db, 'orders', order.id));
        onDelete(order.id);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error);
      }
    }
  };

  const downloadPDF = () => {
    const docPdf = new jsPDF();
    docPdf.text(`–ê–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç`, 20, 20);
    docPdf.text(`–ö–ª–∏–µ–Ω—Ç: ${order.clientName}`, 20, 30);
    docPdf.text(`–¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone}`, 20, 40);
    docPdf.text(`–ì–æ—Ä–æ–¥: ${order.city}`, 20, 50);
    docPdf.text(`–¢–µ—Ö–Ω–∏–∫: ${order.technician}`, 20, 60);
    docPdf.text(`–î–∞—Ç–∞: ${order.date}`, 20, 70);
    docPdf.text(`–°—Ç–∞—Ç—É—Å: ${order.status}`, 20, 80);
    docPdf.text(`–ó–∞–º–µ—Ç–∫–∏: ${order.notes}`, 20, 90);

    docPdf.text(`–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:`, 20, 110);
    order.equipment.forEach((item, index) => {
      const type = item.type === '–î—Ä—É–≥–æ–µ' ? item.customType : item.type;
      docPdf.text(`${index + 1}. ${type}, ${item.name}, SN: ${item.serial}`, 25, 120 + index * 10);
    });

    docPdf.save(`–ó–∞—è–≤–∫–∞_${order.clientName}.pdf`);
  };

  return (
    <div className="card mb-3 shadow-sm">
      <div className="card-body">
        {isEditing ? (
          <>
            <div className="mb-2">
              <label>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞</label>
              <input
                className="form-control"
                name="clientName"
                value={editedOrder.clientName}
                onChange={handleChange}
              />
            </div>
            <div className="mb-2">
              <label>–¢–µ–ª–µ—Ñ–æ–Ω</label>
              <input
                className="form-control"
                name="phone"
                value={editedOrder.phone}
                onChange={handleChange}
              />
            </div>
            <div className="mb-2">
              <label>–°—Ç–∞—Ç—É—Å</label>
              <select
                className="form-control"
                name="status"
                value={editedOrder.status}
                onChange={handleChange}
              >
                <option value="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞">–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</option>
                <option value="–í —Ä–∞–±–æ—Ç–µ">–í —Ä–∞–±–æ—Ç–µ</option>
                <option value="–ó–∞–≤–µ—Ä—à–µ–Ω–æ">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</option>
              </select>
            </div>
            <div className="mb-2">
              <label>–ó–∞–º–µ—Ç–∫–∏</label>
              <textarea
                className="form-control"
                name="notes"
                value={editedOrder.notes}
                onChange={handleChange}
              />
            </div>

            <button onClick={handleSave} className="btn btn-success btn-sm me-2">
              üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
            <button onClick={() => setIsEditing(false)} className="btn btn-secondary btn-sm me-2">
              ‚ùå –û—Ç–º–µ–Ω–∞
            </button>
          </>
        ) : (
          <>
            <h5 className="card-title">{order.clientName}</h5>
            <p className="card-text">
              <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {order.phone} <br />
              <strong>–ì–æ—Ä–æ–¥:</strong> {order.city} <br />
              <strong>–î–∞—Ç–∞:</strong> {order.date} <br />
              <strong>–¢–µ—Ö–Ω–∏–∫:</strong> {order.technician} <br />
              <strong>–°—Ç–∞—Ç—É—Å:</strong> {order.status} <br />
              <strong>–ó–∞–º–µ—Ç–∫–∏:</strong> {order.notes}
            </p>

            {order.equipment && order.equipment.length > 0 && (
              <div className="mb-3">
                <strong>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</strong>
                <ul className="mt-2">
                  {order.equipment.map((item, index) => (
                    <li key={index}>
                      {item.type === '–î—Ä—É–≥–æ–µ' ? item.customType : item.type} ‚Äî {item.name} (SN: {item.serial})
                    </li>
                  ))}
                </ul>
              </div>
            )}

            <button onClick={() => setIsEditing(true)} className="btn btn-primary btn-sm me-2">
              ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            </button>
            <button onClick={handleDelete} className="btn btn-danger btn-sm me-2">
              üóë –£–¥–∞–ª–∏—Ç—å
            </button>
            <button onClick={downloadPDF} className="btn btn-outline-secondary btn-sm">
              üìÑ –°–∫–∞—á–∞—Ç—å –ê–í–†
            </button>
          </>
        )}
      </div>
    </div>
  );
};

export default OrderCard;
