import React, { useEffect, useState } from 'react';
import OrderCard from '../components/OrderCard';
import { collection, getDocs, setDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../firebase';

const OrdersPage = () => {
  const [orders, setOrders] = useState([]);
  const [filtered, setFiltered] = useState([]);
  const [filters, setFilters] = useState({
    city: '',
    equipmentType: '',
    technician: '',
    status: '',
    phone: '',
    serial: '',
    sort: 'desc',
  });

  const applyFilters = (data, applied = filters) => {
    let result = [...data];

    if (applied.city) {
      result = result.filter((o) => o.city === applied.city);
    }

    if (applied.technician) {
      result = result.filter((o) => o.technician === applied.technician);
    }

    if (applied.equipmentType) {
      result = result.filter((o) =>
        o.equipment.some(
          (eq) =>
            eq.type === applied.equipmentType ||
            eq.customType === applied.equipmentType
        )
      );
    }

    if (applied.status) {
      result = result
        .map((order) => {
          const filteredEquip = order.equipment.filter(
            (eq) => eq.status === applied.status
          );
          return filteredEquip.length > 0
            ? { ...order, filteredEquipment: filteredEquip }
            : null;
        })
        .filter(Boolean);
    }

    if (applied.phone) {
      result = result.filter((order) =>
        order.clientPhone?.toLowerCase().includes(applied.phone.toLowerCase())
      );
    }

    if (applied.serial) {
      result = result.filter((order) =>
        order.equipment.some((eq) =>
          eq.serial?.toLowerCase().includes(applied.serial.toLowerCase())
        )
      );
    }

    result.sort((a, b) => {
      const dateA = new Date(a.createdAt || 0);
      const dateB = new Date(b.createdAt || 0);
      return applied.sort === 'asc' ? dateA - dateB : dateB - dateA;
    });

    setFiltered(result);
  };

  const fetchOrders = async () => {
    try {
      const snapshot = await getDocs(collection(db, 'orders'));
      const data = snapshot.docs.map(doc => ({ ...doc.data(), id: doc.id }));

      setOrders(data);
      applyFilters(data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:', error);
    }
  };

  useEffect(() => {
    fetchOrders();
  }, []);

  const handleUpdate = async (updatedOrder) => {
    try {
      await setDoc(doc(db, 'orders', updatedOrder.id), updatedOrder);
      const updatedOrders = orders.map((o) =>
        o.id === updatedOrder.id ? updatedOrder : o
      );
      setOrders(updatedOrders);
      applyFilters(updatedOrders, filters);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
    }
  };

  const handleDelete = async (id) => {
    try {
      await deleteDoc(doc(db, 'orders', id));
      const updated = orders.filter(order => order.id !== id);
      setOrders(updated);
      applyFilters(updated, filters);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
    }
  };

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters(prev => ({ ...prev, [name]: value }));
  };

  const equipmentTypes = Array.from(
    new Set(
      orders.flatMap((o) =>
        o.equipment.map((eq) => eq.customType || eq.type).filter(Boolean)
      )
    )
  );

  const handleResetFilters = () => {
  const reset = {
    city: '',
    equipmentType: '',
    technician: '',
    status: '',
    phone: '',
    serial: '',
    sort: 'desc',
  };
  setFilters(reset);
  applyFilters(orders, reset);
};

  return (
    <div className="container mt-4">
      <div className="d-flex justify-content-between align-items-center mb-2">
        <h4>üì¶ –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫</h4>
        <span className="badge bg-primary fs-6">
          –ö–æ–ª-–≤–æ –∑–∞—è–≤–æ–∫: {filtered.length}
        </span>
      </div>

      <div className="card p-3 mb-4 shadow-sm">
        <h5>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫</h5>
        <div className="row g-3 mt-2">
          <div className="col-md-3">
            <label>–ì–æ—Ä–æ–¥</label>
            <select name="city" className="form-select" value={filters.city} onChange={handleFilterChange}>
              <option value="">–í—Å–µ –≥–æ—Ä–æ–¥–∞</option>
              <option value="–ê—Å—Ç–∞–Ω–∞">–ê—Å—Ç–∞–Ω–∞</option>
              <option value="–ê–ª–º–∞—Ç—ã">–ê–ª–º–∞—Ç—ã</option>
            </select>
          </div>

          <div className="col-md-3">
            <label>–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</label>
            <select name="equipmentType" className="form-select" value={filters.equipmentType} onChange={handleFilterChange}>
              <option value="">–í—Å–µ —Ç–∏–ø—ã</option>
              {equipmentTypes.map((type, i) => (
                <option key={i} value={type}>{type}</option>
              ))}
            </select>
          </div>

          <div className="col-md-3">
            <label>–¢–µ—Ö–Ω–∏–∫</label>
            <select name="technician" className="form-select" value={filters.technician} onChange={handleFilterChange}>
              <option value="">–í—Å–µ —Ç–µ—Ö–Ω–∏–∫–∏</option>
              <option value="–ï—Ä–º–∞—Ö–∞–Ω">–ï—Ä–º–∞—Ö–∞–Ω</option>
              <option value="–ú–∞–¥–∏">–ú–∞–¥–∏</option>
            </select>
          </div>

          <div className="col-md-3">
            <label>–°—Ç–∞—Ç—É—Å —Ä–µ–º–æ–Ω—Ç–∞</label>
            <select name="status" className="form-select" value={filters.status} onChange={handleFilterChange}>
              <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
              <option value="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞">–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</option>
              <option value="–†–µ–º–æ–Ω—Ç">–†–µ–º–æ–Ω—Ç</option>
              <option value="–ì–æ—Ç–æ–≤–æ">–ì–æ—Ç–æ–≤–æ</option>
            </select>
          </div>

          <div className="col-md-3">
            <label>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</label>
            <input type="text" name="phone" className="form-control" placeholder="–ß–∞—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞" value={filters.phone} onChange={handleFilterChange} />
          </div>

          <div className="col-md-3">
            <label>–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä</label>
            <input type="text" name="serial" className="form-control" placeholder="–ß–∞—Å—Ç—å —Å–µ—Ä–∏–π–Ω–∏–∫–∞" value={filters.serial} onChange={handleFilterChange} />
          </div>

          <div className="col-md-3">
            <label>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ</label>
            <select name="sort" className="form-select" value={filters.sort} onChange={handleFilterChange}>
              <option value="desc">–°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ</option>
              <option value="asc">–°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ</option>
            </select>
          </div>

<div className="col-md-3 d-flex align-items-end gap-2">
  <button className="btn btn-primary w-50" onClick={() => applyFilters(orders, filters)}>
    üîç –ü–æ–∏—Å–∫
  </button>
  <button className="btn btn-outline-secondary w-50" onClick={handleResetFilters}>
    ‚Ü©Ô∏è –°–±—Ä–æ—Å
  </button>
</div>

          
        </div>
      </div>

      {filtered.length > 0 ? (
        filtered.map((order) => (
          <OrderCard
            key={order.id}
            order={order}
            onUpdate={handleUpdate}
            onDelete={() => handleDelete(order.id)}
          />
        ))
      ) : (
        <div className="alert alert-info">–ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</div>
      )}
    </div>
  );
};

export default OrdersPage;
